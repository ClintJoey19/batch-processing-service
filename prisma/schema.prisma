datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // templates
  templatesCreated  Template[] @relation(name: "TemplatesCreatedByUser")
  templatesModified Template[] @relation(name: "TemplatesModifiedByUser")

  // batch process
  batchProcessesCreated BatchProcess[] @relation(name: "BatchProcessesCreatedByUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

enum TemplateStatus {
  draft
  published
}

model Template {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  status      TemplateStatus @default(draft)
  description String?
  structure   Json?

  // Audit
  createdById String   @db.ObjectId
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "TemplatesCreatedByUser")
  createdAt   DateTime @default(now())

  updatedById String?  @db.ObjectId
  updatedBy   User?    @relation(fields: [updatedById], references: [id], onDelete: SetNull, name: "TemplatesModifiedByUser")
  updatedAt   DateTime @updatedAt
}

enum BatchProcessStatus {
  started
  executing
  completed
  error
}

enum BatchProcessMethod {
  createSharedDrives
  createFolders
  addMembers
}

model BatchProcess {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  status      BatchProcessStatus @default(started)
  method      BatchProcessMethod

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Audit
  createdById String   @db.ObjectId
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "BatchProcessesCreatedByUser")
  createdAt   DateTime @default(now())
}

enum BatchProcessLogTag {
  CREATE
  UPDATE
  DELETE
}

enum BatchProcessLogStatus {
  executing
  completed
  error
}

model BatchProcessLog {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  tag         BatchProcessLogTag
  description String
  status      BatchProcessLogStatus @default(executing)

  startedAt   DateTime  @default(now())
  completedAt DateTime?
}
